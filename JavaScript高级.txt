 JavaScript高级：
三样东西：
	书：犀牛书---JavaScript权威指南
	微信公众号：前端大全
	上届笔记：预习，

数组：
	join()		//将数组的元素组起一个字符串 
	push()		//添加到数组末尾，并返回修改后数组的长度。 
	pop()		//末尾移除最后一项，减少数组的 length 值，然后返回移除的项。
	shift() 	//删除原数组第一项，并返回删除元素的值
	unshift()	//将参数添加到原数组开头，并返回数组的长度 。
	sort()		//按升序排列数组项
	reverse()	//反转数组项的顺序
	concat()	//合并数组
	slice()
	splice()	//很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。
	indexOf()和 
	lastIndexOf() （ES5新增）
	forEach() （ES5新增）
	map() （ES5新增）
	filter() （ES5新增）
	every() （ES5新增）
	some() （ES5新增）	//判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。
	reduce()和 
	reduceRight() （ES5新增）

string：
	str.charAt(i)  => str[i]
	str.charCodeAt(i) ---返回unicode码
	str.toUpperCase() 转为大写
	str.toLowerCase() 转为小写
	.slice(n,end)  ---查找子字符，从下标为n处开始，
	.substring()  ----同上，但不能为负数
	.indexOf("c",3)  ---找关键词"c"，从下标为3处开始，返回下标
	.lastIndexOf()  ---最后一个关键词的下标

php: 
	strpos -> indexOf
       stripos 忽略大小写版本的indexOf  没有就返回FALSE
       strrpos -> lastIndexOf
       strripos 忽略大小写的lastIndexOf版本
    $i=stripos(完整字符串,关键词[,开始位置])

正则表达式：Regular Expression
		后加i  (ignore忽略) 忽略大小写
		后加g (global全部)	查找全部
	.replace(/正则/ig,"替换值");   ---替换
	.replace(/正则/i,function(kword)  ---高级替换
	.split("切割符");   ---切割   返回的是数组
	.split(/正则/)      ----复杂切割   返回的是数组
	.search(/正则表达式/i);  --用正则表达式查找str中第一个匹配的关键词的位置  没有就返回-1 (不支持g)
	.match(/正则/ig)   -----查找关键字的内容   --返回值是数组，没有就返回null
	RegExp:		---动态生成正则表达式
		var reg=new RegExp("正则","ig");  ---果正则表达式不是固定，需要动态生成，就必须用new RegExp创建
		reg.test(str)  ---验证str的格式是否符合reg的要求,默认只要部分匹配就返回true,解决：只要验证，必须前加^，后加$
		reg.exec(str)  --- 在str中查找下*一个*符合reg要求的关键词的*内容和位置*
							 返回值: [
									   0: 关键词完整内容,
									   1: 第1个分组的子内容,
									   index:关键词的位置
		
事件：
	onfocus ----获得焦点时
	onkeyup   ---按键弹起时（输入完毕时）
	onblur   ----失去焦点时
	onboard   ----body事件
	onclick  ----点击时
	onchange  ----值发生改变时
	onmouseover   ---鼠标经过时
	onmouseout   ----鼠标离开时


Math:
	Math.ceil(num)   ---上取整
	Math.floor(num)  ---下取整，舍弃小数部分
	parseInt(str)  ---能去单位
	Math.round (num)  ---四舍五入取整  --返回number
	.toFixed(2)     ----返回字符串
	Math.random()  ---随机生成一个0~1之间的小数  ---公式: 在任意min~max之间生成一个随机整数
													 parseInt(Math.random()*(max-min+1)+min)

	Math.pow(底数,幂)   ---乘方
	Math.sqrt(num)		---开平方
	Math.max(值1,值2,...) 获得多个值中的最大值
	Math.min(值1,值2,...) 获得多个值中的最小值
date:
	var now =new Date();  ---获得当前系统的日期和时间
	 var date2=new Date(date1);  ---复制一个日期对象
	 get/set  ---获取/设置
			 1. 单位: FullYear Month Date Day ——都没有s结尾
					  Hours Minutes Seconds Milliseconds ——都有s结尾
	var now=new Date().getTime()  ----获得1970年到现在的毫秒数
将日期转为字符串
	date.toString();  --转化为当地时间的完整格式
	date.toLocaleString(); ---转化为当地时间的简化版格式
	date.toLocaleDateString()   ---简化版格式，仅保留日期部分
	date.toLocaleTimeString()  ----简化版格式，仅保留时间部分
	date.toGTMString()   ------转化为国际标准时间
	Date.parse(now)  ----将now转化为1970年到现在的毫秒数！
	Milliseconds   ----转化为毫秒，3位数。
	date.getSeconds();  ---获取时钟的秒数
	date.getMinutes();	---获取时钟的分数
	date.getHours();	---获取时钟的时数

Error:  ---错误处理
	try{ 可能出错的代码 }
	catch(err){ 只有发生错误时才执行的代码 
		3事件：1.提示用户，2，保存进度，3.记录日志
	}
  错误类型6种：
	  SyntaxError: 语法错误
	  ReferenceError: 引用错误, 要用的变量没找到
	  TypeError: 类型错误: 错误的使用了对象的方法或()或[]
	  RangeError: 范围错误, 参数超范围
	  URIError: URI错误, 如果请求所使用的url拼接错误
	  EvalError: Eval错误
  抛出错误: 
	  何时: 函数的作者向函数的调用者抛出自定义错误对象，告知调用者错误的使用了函数。
	  如何: throw new Error("自定义错误提示信息")

function：
	1,声明：function 函数名(){}  ---会声明提前
	2,赋值：var 函数名=function(){}   ---不会声明提前
	3,用new：var 函数名=new Function("参数1",..."函数体")
   重载(overload):
		arguments: 
			什么是: 函数调用时自动创建的
            接收所有传入函数的参数值的
            类数组对象
			 类数组对象: 长的像数组的对象
   匿名函数: 
		回调(allback): 
		自调:    1. (function(...){...})()
				 2. +function(...){...}()

	

构造函数：
	function Studen(sname,sage...){
		this.sname=sname;
		this.sage=sage;
	}
	var lili=new Studen(值，值...);  ---用构造函数创建对象；
面向对象：
	var obj={....属性名：值}  ---创建对象
	obj.属性名=值    ---新增一个属性
	this.   自动获得.前的元素对象本身
继承：
	类型名.prototype			---原型对象；父级，
	obj.prototype.新成员=值；		---添加共有成员，共有的；
	var bool=obj.hasOwnProperty("属性名"); ----判断是否自由的属性s
	if(typeof 类型名.prototype.API !="function")   ---判断当前浏览器是否支持该API
		类型名.prototype.API=function(参数列表){....}   ---向指定类型的原型对象添加API
	判断是不是数组类型：
		1，判断父级原型对象  ----var bool=父对象.isPrototypeOf(子对象);
			Array.isPrototypeOf(obj);
		2,判断构造函数    ----对象.constructor===构造函数;  
			obj.constructor===Array;
			obj instanceof 构造函数;  --同上
		3,class   ----Object.prototype.toString.call(obj)
			返回值：[object class属性值]
		4,isArray   ----var bool=Array.isArray(obj)
			Array.isArray(obj);
	自定义继承关系：
		对象.__proto__=对象2;  ----只修改一个对象的父对象；
		Object.setPrototypeOf(对象1,对象2);   ---同上
		构造函数.prototype=另一个原型对象;   ---修改构造函数的原型对象。==修改所有子对象的父对象

		定义抽象父类型：
			
			    function Flyer(fname,speed){
			      this.fname=fname;
			      this.speed=speed;
			    }
			    Flyer.prototype.fly=function(){
			      console.log(
				this.fname+"以时速"+this.speed+"飞行");
			    }
			    function Plane(fname,speed,score){
			      //Flyer(fname,speed);//this->window
			      //new Flyer(fname,speed);//新创建另一个对象
			      Flyer.call(this,fname,speed);	正确: 只要函数调用时，this不是想要的，都用call替换！
									父类型构造函数.call(正确的this,参数......)
			      this.score=score;
严格模式：  "use strict";
对对象的保护：
	Object.getOwnPropertyDescriptor(obj,"属性名");   ---查看一个属性的四大特性	
          value: 实际存储属性值,
          writable: true/false, 控制只读
          enumerable: true/false, 控制能否被for in遍历到。但是，用.依然可以访问到！
          configurable: true/false, 控制:
					    1. 控制能否删除该属性
					    2. 控制能否修改其它特性
						 一旦该为false，不可逆！
	  Object.defineProperties(obj, {    ----同时修改多个属性的四大特性;
	        属性名:{
		  四大特性:值,
                ... : ...
	        },
		........
          }
	访问器属性：
		Object.defineProperties(eric,{
     		_age:{enumerable:false,configurable:false},
      		age:{//访问器属性
        			get(){return this._age},
        			set(val){
          			if(val>=18&&val<=65)
            				this._age=val;
          			else
            				throw new RangeError("年龄必须介于18~65之间");
        			},
        			enumberable:true,
        			configurable:true
      		},
    		})
		 如何使用: 访问器属性的用法和普通属性完全一样！
			只不过: 在试图获取属性值时，自动调用get
				在试图修改属性值时，自动调用set
				参数val自动获得等号右边的新值
		   内部属性: 不能用.访问的属性: class  _ _proto_ _
	防篡改:
		1. 防扩展: 禁止向对象中添加新属性:
			Object.preventExtensions(obj)；
		2. 密封: 即禁止扩展，又禁止删除！
			Object.seal(obj);
		3. Object.create()  ---仅基于一个现有父对象，创建他的子对象，并为子对象扩展新的自有属性
			var child=Object.create(father,{//Object.defineProperties 
				属性名:{四大特性}
				... : ...
			});
		4. call/apply/bind:
		 	call: 要求传入函数的参数必须单独传入   ---强行*调用*一个函数，并*临时*替换函数中的this为指定对象
		        apply: 要求传入函数的参数必须放在数组中整体传入
			bind:
		数组API:
			判断：
			遍历：forEach
			过滤和汇总：
				过滤：filter，汇总：reduce

	冻结：
		Object.freeze(对象); 



ES6:
	let:   代替var，1. 为js添加了块级作用域，2. 避免了声明提前
	参数增强： 
				var args=Array.prototype.slice.call(arguments); 取出的是纯数组
				//arguments.slice()
				arguments问题
					  1. 不是数组类型，用不了数组的API
					  2. 默认只能获得所有参数值，不能选
	解构:	
				1. 数组解构: var arr=[1,2,3]; var [a,b,c]=arr;
				2. 对象解构: var date={y:2017,m:9,d:21};
							 var {y:year,m:month,d:date}=date;
							 console.log(year,month,date);
    
	
	for of:
				for(var elem of arr)  ---elem可直接获得arr中每个元素值
					无法获得下标——要用下标时，不能用for of
					只能遍历所有，不能有选择的遍历
	class: 
		 简化继承: 
			1. class 子类型 extends 父类型
				类似于: 
				Object.setPrototypeOf(
					子类型.prototype, 父类型.prototype
				);
			2. 借用父类型构造函数: super(参数...)
			 不用call，不用this！
		     其中: super特指父类型构造函数,且自动用当前正确this替换父类型构造函数中的this
		     super.父类型原型方法()
	静态： 
			 static 方法(){...}  //不用new 
			  访问器属性: 
					  get 属性名(){ return this._属性名;}
						set 属性名(val){...}
	Promise：  return new Promise(function(callback,reject){....}  回调函数的一种更直观的写法
				.then 然后  .catch错误后
				 Promise.all([
								 r1(),r2(),r3()
								]).then(end);   ---直到所有都执行完才执行.then



	导入/导出：
		var export2 = function(){
			 return "from export2";
			}
			exports.export2 = export2;		//导出

			var md1 = require("./module.js")	//导入

		import:
			// export3.js 文件
			 export const myModules = {c:1 }	//导出
			 export const myModules2 = {d:2 }	//导出
			 // import.js 文件
			 import {myModule1,myModule2} from './export3.js' ;	//导入

		default：	---如果只在一个文件中提供了一个导出的口，就可以使用默认导出
			//export4.js 
			 const str2 ="hello world";
			 export default str2 ;
			 // import2.js
			 import anyName from "./export4.js"
			 console.log(anyName);